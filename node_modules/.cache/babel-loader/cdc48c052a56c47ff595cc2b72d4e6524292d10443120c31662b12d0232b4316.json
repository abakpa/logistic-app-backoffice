{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  drivers: [],\n  loading: false,\n  error: null\n};\nconst driverSlice = createSlice({\n  name: 'drivers',\n  initialState,\n  reducers: {\n    fetchDriverRequest: state => {\n      state.loading = true;\n    },\n    fetchDriverSuccess: (state, action) => {\n      state.drivers = action.payload;\n      state.loading = false;\n    },\n    fetchDriverFailure: (state, action) => {\n      state.error = action.payload;\n    },\n    createDriverRequest: state => {\n      state.loading = true;\n    },\n    createDriverSuccess: (state, action) => {\n      state.drivers.push(action.payload);\n      state.loading = false;\n    },\n    createDriverFailure: (state, action) => {\n      state.drivers = action.payload;\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  fetchDriverRequest,\n  fetchDriverSuccess,\n  fetchDriverFailure,\n  createDriverRequest,\n  createDriverSuccess,\n  createDriverFailure\n} = driverSlice.actions;\nexport default driverSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","drivers","loading","error","driverSlice","name","reducers","fetchDriverRequest","state","fetchDriverSuccess","action","payload","fetchDriverFailure","createDriverRequest","createDriverSuccess","push","createDriverFailure","actions","reducer"],"sources":["/Users/josephabakpa/Documents/CODES/LOGISTIC APP/front-end/src/redux/slices/driverSlice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\nconst initialState = {\n    drivers: [],\n    loading: false,\n    error:null,\n};\n\nconst driverSlice = createSlice({\n    name:'drivers',\n    initialState,\n    reducers:{\n        fetchDriverRequest:(state)=>{\n            state.loading = true\n        },\n        fetchDriverSuccess:(state,action)=>{\n            state.drivers= action.payload;\n            state.loading=false\n        },\n        fetchDriverFailure:(state,action)=>{\n            state.error = action.payload\n        },\n        createDriverRequest:(state)=>{\n            state.loading=true\n        },\n        createDriverSuccess:(state,action)=>{\n            state.drivers.push(action.payload)\n            state.loading=false\n        },\n        createDriverFailure:(state,action)=>{\n            state.drivers=action.payload\n            state.loading=false\n        }\n    }\n})\n\nexport const {fetchDriverRequest,fetchDriverSuccess,fetchDriverFailure,createDriverRequest,createDriverSuccess,createDriverFailure} = driverSlice.actions\n\nexport default driverSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAE5C,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAC;AACV,CAAC;AAED,MAAMC,WAAW,GAAGL,WAAW,CAAC;EAC5BM,IAAI,EAAC,SAAS;EACdL,YAAY;EACZM,QAAQ,EAAC;IACLC,kBAAkB,EAAEC,KAAK,IAAG;MACxBA,KAAK,CAACN,OAAO,GAAG,IAAI;IACxB,CAAC;IACDO,kBAAkB,EAACA,CAACD,KAAK,EAACE,MAAM,KAAG;MAC/BF,KAAK,CAACP,OAAO,GAAES,MAAM,CAACC,OAAO;MAC7BH,KAAK,CAACN,OAAO,GAAC,KAAK;IACvB,CAAC;IACDU,kBAAkB,EAACA,CAACJ,KAAK,EAACE,MAAM,KAAG;MAC/BF,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IACDE,mBAAmB,EAAEL,KAAK,IAAG;MACzBA,KAAK,CAACN,OAAO,GAAC,IAAI;IACtB,CAAC;IACDY,mBAAmB,EAACA,CAACN,KAAK,EAACE,MAAM,KAAG;MAChCF,KAAK,CAACP,OAAO,CAACc,IAAI,CAACL,MAAM,CAACC,OAAO,CAAC;MAClCH,KAAK,CAACN,OAAO,GAAC,KAAK;IACvB,CAAC;IACDc,mBAAmB,EAACA,CAACR,KAAK,EAACE,MAAM,KAAG;MAChCF,KAAK,CAACP,OAAO,GAACS,MAAM,CAACC,OAAO;MAC5BH,KAAK,CAACN,OAAO,GAAC,KAAK;IACvB;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACK,kBAAkB;EAACE,kBAAkB;EAACG,kBAAkB;EAACC,mBAAmB;EAACC,mBAAmB;EAACE;AAAmB,CAAC,GAAGZ,WAAW,CAACa,OAAO;AAEzJ,eAAeb,WAAW,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}