{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { fetchOrderRequest, fetchOrderSuccess, fetchOrderFailure, fetchDriverOrderSuccess, createOrderRequest, createOrderSuccess, createOrderFailure } from '../slices/orderSlice';\nfunction* fetchOrderSaga() {\n  try {\n    const response = yield call(axios.get, 'http://localhost:4000/api/orders');\n    yield put(fetchOrderSuccess(response.data));\n  } catch (error) {\n    yield put(fetchOrderFailure(error.response.data.message));\n  }\n}\nfunction* fetchDriverOrderSaga() {\n  try {\n    const response = yield call(axios.get, 'http://localhost:4000/api/orders/orderbydriver');\n    yield put(fetchDriverOrderSuccess(response.data));\n  } catch (error) {\n    yield put(fetchDriverOrderFailure(error.response.data.message));\n  }\n}\nfunction* createOrderSaga(action) {\n  const {\n    details,\n    navigate\n  } = action.payload;\n  try {\n    const token = localStorage.getItem('authToken');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = yield call(axios.post, 'http://localhost:4000/api/orders/dispatch', details, config);\n    yield put(createOrderSuccess(response.data));\n    navigate('/Order');\n  } catch (error) {\n    yield put(createOrderFailure(error.response.data.message));\n  }\n}\nfunction* orderSaga() {\n  yield takeLatest(fetchOrderRequest.type, fetchOrderSaga);\n  yield takeLatest(fetchOrderRequest.type, fetchDriverOrderSaga);\n  yield takeLatest(createOrderRequest.type, createOrderSaga);\n}\nexport default orderSaga;","map":{"version":3,"names":["call","put","takeLatest","axios","fetchOrderRequest","fetchOrderSuccess","fetchOrderFailure","fetchDriverOrderSuccess","createOrderRequest","createOrderSuccess","createOrderFailure","fetchOrderSaga","response","get","data","error","message","fetchDriverOrderSaga","fetchDriverOrderFailure","createOrderSaga","action","details","navigate","payload","token","localStorage","getItem","config","headers","Authorization","post","orderSaga","type"],"sources":["/Users/josephabakpa/Documents/CODES/LOGISTIC APP/front-end/src/redux/sagas/orderSaga.js"],"sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects'\nimport axios from 'axios'\nimport {fetchOrderRequest,fetchOrderSuccess,fetchOrderFailure,fetchDriverOrderSuccess,createOrderRequest,createOrderSuccess,createOrderFailure} from '../slices/orderSlice'\n\n function* fetchOrderSaga(){\n    try {\n    \n        const response = yield call(axios.get, 'http://localhost:4000/api/orders')\n        yield put(fetchOrderSuccess(response.data))\n    } catch (error) {\n        yield put(fetchOrderFailure(error.response.data.message))\n    }\n}\n function* fetchDriverOrderSaga(){\n    try {\n    \n        const response = yield call(axios.get, 'http://localhost:4000/api/orders/orderbydriver')\n        yield put(fetchDriverOrderSuccess(response.data))\n    } catch (error) {\n        yield put(fetchDriverOrderFailure(error.response.data.message))\n    }\n}\nfunction* createOrderSaga(action){\n    const {details,navigate} = action.payload\n    try {\n      \n        const token = localStorage.getItem('authToken');\n        const config = {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }\n        const response = yield call(axios.post,'http://localhost:4000/api/orders/dispatch', details,config);\n        yield put(createOrderSuccess(response.data))\n        navigate('/Order')\n    } catch (error) {\n        yield put(createOrderFailure(error.response.data.message))\n    }\n}\n\nfunction* orderSaga(){\n    yield takeLatest(fetchOrderRequest.type, fetchOrderSaga)\n    yield takeLatest(fetchOrderRequest.type, fetchDriverOrderSaga)\n    yield takeLatest(createOrderRequest.type, createOrderSaga)\n}\n\nexport default orderSaga"],"mappings":"AAAA,SAAQA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAO,oBAAoB;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,iBAAiB,EAACC,iBAAiB,EAACC,iBAAiB,EAACC,uBAAuB,EAACC,kBAAkB,EAACC,kBAAkB,EAACC,kBAAkB,QAAO,sBAAsB;AAE1K,UAAUC,cAAcA,CAAA,EAAE;EACvB,IAAI;IAEA,MAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACG,KAAK,CAACU,GAAG,EAAE,kCAAkC,CAAC;IAC1E,MAAMZ,GAAG,CAACI,iBAAiB,CAACO,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMd,GAAG,CAACK,iBAAiB,CAACS,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC;EAC7D;AACJ;AACC,UAAUC,oBAAoBA,CAAA,EAAE;EAC7B,IAAI;IAEA,MAAML,QAAQ,GAAG,MAAMZ,IAAI,CAACG,KAAK,CAACU,GAAG,EAAE,gDAAgD,CAAC;IACxF,MAAMZ,GAAG,CAACM,uBAAuB,CAACK,QAAQ,CAACE,IAAI,CAAC,CAAC;EACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMd,GAAG,CAACiB,uBAAuB,CAACH,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC;EACnE;AACJ;AACA,UAAUG,eAAeA,CAACC,MAAM,EAAC;EAC7B,MAAM;IAACC,OAAO;IAACC;EAAQ,CAAC,GAAGF,MAAM,CAACG,OAAO;EACzC,IAAI;IAEA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMC,MAAM,GAAG;MACXC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUL,KAAK;MAClC;IACJ,CAAC;IACD,MAAMZ,QAAQ,GAAG,MAAMZ,IAAI,CAACG,KAAK,CAAC2B,IAAI,EAAC,2CAA2C,EAAET,OAAO,EAACM,MAAM,CAAC;IACnG,MAAM1B,GAAG,CAACQ,kBAAkB,CAACG,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC5CQ,QAAQ,CAAC,QAAQ,CAAC;EACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZ,MAAMd,GAAG,CAACS,kBAAkB,CAACK,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC;EAC9D;AACJ;AAEA,UAAUe,SAASA,CAAA,EAAE;EACjB,MAAM7B,UAAU,CAACE,iBAAiB,CAAC4B,IAAI,EAAErB,cAAc,CAAC;EACxD,MAAMT,UAAU,CAACE,iBAAiB,CAAC4B,IAAI,EAAEf,oBAAoB,CAAC;EAC9D,MAAMf,UAAU,CAACM,kBAAkB,CAACwB,IAAI,EAAEb,eAAe,CAAC;AAC9D;AAEA,eAAeY,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}