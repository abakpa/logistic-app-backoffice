{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { fetchDispatchRequest, fetchDispatchSuccess, fetchDispatchFailure, fetchActiveDispatchRequest, fetchActiveDispatchSuccess, fetchActiveDispatchFailure, fetchDispatchByDriverRequest, fetchDispatchByDriverSuccess, fetchDispatchByDriverFailure, createDispatchByDriverRequest, createDispatchByDriverSuccess, createDispatchByDriverFailure, createDispatchRequest, createDispatchSuccess, createDispatchFailure } from '../slices/dispatchSlice';\nimport io from 'socket.io-client';\nconst socket = io.connect('http://localhost:4000');\nfunction* fetchDispatchSaga() {\n  try {\n    const response = yield call(axios.get, 'http://localhost:4000/api/dispatch');\n    yield put(fetchDispatchSuccess(response.data));\n  } catch (error) {\n    yield put(fetchDispatchFailure(error.response.data.message));\n  }\n}\nfunction* fetchActiveDispatchSaga() {\n  try {\n    const response = yield call(axios.get, 'http://localhost:4000/api/dispatch/active');\n    yield put(fetchActiveDispatchSuccess(response.data));\n  } catch (error) {\n    yield put(fetchActiveDispatchFailure(error.response.data.message));\n  }\n}\nfunction* fetchDispatchByDriverSaga() {\n  // const {orderId,navigate} = action.payload\n  // const {orderId} = action.payload\n  try {\n    const token = localStorage.getItem('authToken');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = yield call(axios.get, 'http://localhost:4000/api/dispatch/driver', config);\n    yield put(fetchDispatchByDriverSuccess(response.data));\n    // navigate('/OrderByDriver')\n  } catch (error) {\n    yield put(fetchDispatchByDriverFailure(error.response.data.message));\n  }\n}\nfunction* createDispatchByDriverSaga(action) {\n  const {\n    orderId,\n    navigate\n  } = action.payload;\n  try {\n    const token = localStorage.getItem('authToken');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = yield call(axios.put, `http://localhost:4000/api/orders/dispatch/${orderId}`, {}, config);\n    console.log('response 1', response.data);\n    yield;\n    if (response.data.status) {\n      socket.emit('send_message', {\n        message: response.data.status\n      });\n    }\n    yield put(createDispatchByDriverSuccess(response.data));\n    if (response.data._id) {\n      navigate('/OrderByDriver');\n    }\n  } catch (error) {\n    yield put(createDispatchByDriverFailure(error.response.data.message));\n  }\n}\nfunction* createDispatchSaga(action) {\n  // const {orderId,navigate} = action.payload\n  const {\n    orderId\n  } = action.payload;\n  try {\n    const token = localStorage.getItem('authToken');\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = yield call(axios.put, `http://localhost:4000/api/dispatch/status/${orderId}`, {}, config);\n    yield put(createDispatchSuccess(response.data));\n    // navigate('/OrderByDriver')\n  } catch (error) {\n    yield put(createDispatchFailure(error.response.data.message));\n  }\n}\nfunction* dispatchSaga() {\n  yield takeLatest(fetchDispatchRequest.type, fetchDispatchSaga);\n  yield takeLatest(fetchActiveDispatchRequest.type, fetchActiveDispatchSaga);\n  yield takeLatest(fetchDispatchByDriverRequest.type, fetchDispatchByDriverSaga);\n  yield takeLatest(createDispatchRequest.type, createDispatchSaga);\n  yield takeLatest(createDispatchByDriverRequest.type, createDispatchByDriverSaga);\n}\nexport default dispatchSaga;","map":{"version":3,"names":["call","put","takeLatest","axios","fetchDispatchRequest","fetchDispatchSuccess","fetchDispatchFailure","fetchActiveDispatchRequest","fetchActiveDispatchSuccess","fetchActiveDispatchFailure","fetchDispatchByDriverRequest","fetchDispatchByDriverSuccess","fetchDispatchByDriverFailure","createDispatchByDriverRequest","createDispatchByDriverSuccess","createDispatchByDriverFailure","createDispatchRequest","createDispatchSuccess","createDispatchFailure","io","socket","connect","fetchDispatchSaga","response","get","data","error","message","fetchActiveDispatchSaga","fetchDispatchByDriverSaga","token","localStorage","getItem","config","headers","Authorization","createDispatchByDriverSaga","action","orderId","navigate","payload","console","log","status","emit","_id","createDispatchSaga","dispatchSaga","type"],"sources":["/Users/josephabakpa/Documents/CODES/LOGISTIC APP/back-office/src/redux/sagas/dispatchSaga.js"],"sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects'\nimport axios from 'axios'\n\nimport {\n    fetchDispatchRequest,\n    fetchDispatchSuccess,\n    fetchDispatchFailure,\n    fetchActiveDispatchRequest,\n    fetchActiveDispatchSuccess,\n    fetchActiveDispatchFailure,\n    fetchDispatchByDriverRequest,\n    fetchDispatchByDriverSuccess,\n    fetchDispatchByDriverFailure,\n    createDispatchByDriverRequest,\n    createDispatchByDriverSuccess,\n    createDispatchByDriverFailure,\n    createDispatchRequest,\n    createDispatchSuccess,\n    createDispatchFailure\n} from '../slices/dispatchSlice'\nimport io from 'socket.io-client'\nconst socket = io.connect('http://localhost:4000')\n\n function* fetchDispatchSaga(){\n    try {\n       \n        const response = yield call(axios.get, 'http://localhost:4000/api/dispatch')\n        yield put(fetchDispatchSuccess(response.data))\n    } catch (error) {\n        yield put(fetchDispatchFailure(error.response.data.message))\n    }\n}\n function* fetchActiveDispatchSaga(){\n    try {\n       \n        const response = yield call(axios.get, 'http://localhost:4000/api/dispatch/active')\n        yield put(fetchActiveDispatchSuccess(response.data))\n    } catch (error) {\n        yield put(fetchActiveDispatchFailure(error.response.data.message))\n    }\n}\nfunction* fetchDispatchByDriverSaga(){\n    // const {orderId,navigate} = action.payload\n    // const {orderId} = action.payload\n    try {\n      \n        const token = localStorage.getItem('authToken');\n        const config = {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }\n        const response = yield call(axios.get,'http://localhost:4000/api/dispatch/driver',config);\n        yield put(fetchDispatchByDriverSuccess(response.data))\n        // navigate('/OrderByDriver')\n    } catch (error) {\n        yield put(fetchDispatchByDriverFailure(error.response.data.message))\n    }\n}\nfunction* createDispatchByDriverSaga(action){\n    const {orderId,navigate} = action.payload\n    try {\n      \n        const token = localStorage.getItem('authToken');\n        const config = {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }\n        const response = yield call(axios.put,`http://localhost:4000/api/orders/dispatch/${orderId}`,{},config);\n        console.log('response 1',response.data)\n        yield \n        if(response.data.status){\n        socket.emit('send_message',{message:response.data.status})\n        }\n        yield put(createDispatchByDriverSuccess(response.data))\n        if(response.data._id){\n        navigate('/OrderByDriver')\n        }\n    } catch (error) {\n        yield put(createDispatchByDriverFailure(error.response.data.message))\n    }\n}\nfunction* createDispatchSaga(action){\n    // const {orderId,navigate} = action.payload\n    const {orderId} = action.payload\n    try {\n      \n        const token = localStorage.getItem('authToken');\n        const config = {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        }\n        const response = yield call(axios.put,`http://localhost:4000/api/dispatch/status/${orderId}`,{},config);\n        yield put(createDispatchSuccess(response.data))\n        // navigate('/OrderByDriver')\n    } catch (error) {\n        yield put(createDispatchFailure(error.response.data.message))\n    }\n}\n\nfunction* dispatchSaga(){\n    yield takeLatest(fetchDispatchRequest.type, fetchDispatchSaga)\n    yield takeLatest(fetchActiveDispatchRequest.type, fetchActiveDispatchSaga)\n    yield takeLatest(fetchDispatchByDriverRequest.type, fetchDispatchByDriverSaga)\n    yield takeLatest(createDispatchRequest.type, createDispatchSaga)\n    yield takeLatest(createDispatchByDriverRequest.type, createDispatchByDriverSaga)\n}\n\nexport default dispatchSaga"],"mappings":"AAAA,SAAQA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAO,oBAAoB;AACxD,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACIC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,EACpBC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,4BAA4B,EAC5BC,4BAA4B,EAC5BC,4BAA4B,EAC5BC,6BAA6B,EAC7BC,6BAA6B,EAC7BC,6BAA6B,EAC7BC,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAqB,QAClB,yBAAyB;AAChC,OAAOC,EAAE,MAAM,kBAAkB;AACjC,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAO,CAAC,uBAAuB,CAAC;AAEjD,UAAUC,iBAAiBA,CAAA,EAAE;EAC1B,IAAI;IAEA,MAAMC,QAAQ,GAAG,MAAMvB,IAAI,CAACG,KAAK,CAACqB,GAAG,EAAE,oCAAoC,CAAC;IAC5E,MAAMvB,GAAG,CAACI,oBAAoB,CAACkB,QAAQ,CAACE,IAAI,CAAC,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMzB,GAAG,CAACK,oBAAoB,CAACoB,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC;EAChE;AACJ;AACC,UAAUC,uBAAuBA,CAAA,EAAE;EAChC,IAAI;IAEA,MAAML,QAAQ,GAAG,MAAMvB,IAAI,CAACG,KAAK,CAACqB,GAAG,EAAE,2CAA2C,CAAC;IACnF,MAAMvB,GAAG,CAACO,0BAA0B,CAACe,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMzB,GAAG,CAACQ,0BAA0B,CAACiB,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC;EACtE;AACJ;AACA,UAAUE,yBAAyBA,CAAA,EAAE;EACjC;EACA;EACA,IAAI;IAEA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMC,MAAM,GAAG;MACXC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUL,KAAK;MAClC;IACJ,CAAC;IACD,MAAMP,QAAQ,GAAG,MAAMvB,IAAI,CAACG,KAAK,CAACqB,GAAG,EAAC,2CAA2C,EAACS,MAAM,CAAC;IACzF,MAAMhC,GAAG,CAACU,4BAA4B,CAACY,QAAQ,CAACE,IAAI,CAAC,CAAC;IACtD;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMzB,GAAG,CAACW,4BAA4B,CAACc,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC;EACxE;AACJ;AACA,UAAUS,0BAA0BA,CAACC,MAAM,EAAC;EACxC,MAAM;IAACC,OAAO;IAACC;EAAQ,CAAC,GAAGF,MAAM,CAACG,OAAO;EACzC,IAAI;IAEA,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMC,MAAM,GAAG;MACXC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUL,KAAK;MAClC;IACJ,CAAC;IACD,MAAMP,QAAQ,GAAG,MAAMvB,IAAI,CAACG,KAAK,CAACF,GAAG,EAAC,6CAA6CqC,OAAO,EAAE,EAAC,CAAC,CAAC,EAACL,MAAM,CAAC;IACvGQ,OAAO,CAACC,GAAG,CAAC,YAAY,EAACnB,QAAQ,CAACE,IAAI,CAAC;IACvC,KAAK;IACL,IAAGF,QAAQ,CAACE,IAAI,CAACkB,MAAM,EAAC;MACxBvB,MAAM,CAACwB,IAAI,CAAC,cAAc,EAAC;QAACjB,OAAO,EAACJ,QAAQ,CAACE,IAAI,CAACkB;MAAM,CAAC,CAAC;IAC1D;IACA,MAAM1C,GAAG,CAACa,6BAA6B,CAACS,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvD,IAAGF,QAAQ,CAACE,IAAI,CAACoB,GAAG,EAAC;MACrBN,QAAQ,CAAC,gBAAgB,CAAC;IAC1B;EACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;IACZ,MAAMzB,GAAG,CAACc,6BAA6B,CAACW,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC;EACzE;AACJ;AACA,UAAUmB,kBAAkBA,CAACT,MAAM,EAAC;EAChC;EACA,MAAM;IAACC;EAAO,CAAC,GAAGD,MAAM,CAACG,OAAO;EAChC,IAAI;IAEA,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMC,MAAM,GAAG;MACXC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUL,KAAK;MAClC;IACJ,CAAC;IACD,MAAMP,QAAQ,GAAG,MAAMvB,IAAI,CAACG,KAAK,CAACF,GAAG,EAAC,6CAA6CqC,OAAO,EAAE,EAAC,CAAC,CAAC,EAACL,MAAM,CAAC;IACvG,MAAMhC,GAAG,CAACgB,qBAAqB,CAACM,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC/C;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMzB,GAAG,CAACiB,qBAAqB,CAACQ,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC;EACjE;AACJ;AAEA,UAAUoB,YAAYA,CAAA,EAAE;EACpB,MAAM7C,UAAU,CAACE,oBAAoB,CAAC4C,IAAI,EAAE1B,iBAAiB,CAAC;EAC9D,MAAMpB,UAAU,CAACK,0BAA0B,CAACyC,IAAI,EAAEpB,uBAAuB,CAAC;EAC1E,MAAM1B,UAAU,CAACQ,4BAA4B,CAACsC,IAAI,EAAEnB,yBAAyB,CAAC;EAC9E,MAAM3B,UAAU,CAACc,qBAAqB,CAACgC,IAAI,EAAEF,kBAAkB,CAAC;EAChE,MAAM5C,UAAU,CAACW,6BAA6B,CAACmC,IAAI,EAAEZ,0BAA0B,CAAC;AACpF;AAEA,eAAeW,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}